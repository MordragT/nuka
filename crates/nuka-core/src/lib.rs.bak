use cap_std::{
    ambient_authority,
    fs::{Dir, DirBuilder, DirEntry},
    AmbientAuthority,
};
use object::{File as ObjectFile, Object, ObjectSection, Symbol};
use std::{
    convert::Infallible,
    io,
    path::{Path, PathBuf},
    str::{FromStr, Utf8Error},
};
use thiserror::Error;

pub mod derivation;
pub mod env;
pub mod io;
pub mod net;

pub const NUKA_STORE_PATH: &'static str = "/nuka/store";

pub struct Store {
    dir: Dir,
}

impl Store {
    pub fn open<P: AsRef<Path>>(path: P) -> io::Result<Self> {
        let dir = Dir::open_ambient_dir(path, ambient_authority())?;

        Ok(Self { dir })
    }

    pub fn search_file_name(&self, file_name: &str) -> std::io::Result<DirEntry> {
        for entry in self.dir.entries()? {
            let entry = entry?;
            if entry.file_name().to_string_lossy() == file_name {
                return Ok(entry);
            }
        }
        Err(io::Error::new(
            io::ErrorKind::NotFound,
            format!("Could not find {file_name} inside {:?}", self.dir),
        ))
    }
}

#[derive(Debug, Error)]
pub enum ElfError {
    #[error("ObjectError: {0}")]
    Object(#[from] object::Error),
    #[error("FromUtf8Error: {0}")]
    FromUtf8(#[from] Utf8Error),
    #[error("Interpreter not found")]
    InterpreterNotFound,
    #[error("Dynamic section not found")]
    DynamicSectionNotFound,
    #[error("Infallible: {0}")]
    Infallible(#[from] Infallible),
}

type ElfResult<T> = Result<T, ElfError>;

pub struct ElfObject<'a> {
    file: ObjectFile<'a>,
}

impl<'a> ElfObject<'a> {
    pub fn new(data: &'a [u8]) -> object::Result<Self> {
        Ok(Self {
            file: ObjectFile::parse(data)?,
        })
    }

    pub fn interpreter(&self) -> ElfResult<PathBuf> {
        let section = self
            .file
            .section_by_name(".interp")
            .ok_or(ElfError::InterpreterNotFound)?;
        let path = section.data()?;
        let interpreter = std::str::from_utf8(path)?.trim_matches('\0');
        let interpreter_path = PathBuf::from_str(interpreter)?;

        Ok(interpreter_path)
    }

    pub fn dynamic_symbols(&self) -> impl Iterator<Item = Symbol> {
        self.file.dynamic_symbols()
    }
}
